CC  = gcc
CPP = g++

########################################
CFLAGS = -fPIC -lpthread -Wfatal-errors
CPPFLAGS = -Wfatal-errors -fPIC -g -w -std=c++11 -I../ptlib-2.16.2/include -I./include -I$(MINGW_PREFIX)/include/srtp/

LINK_FLAGS = -fPIC -w -g -D__STDC_CONSTANT_MACROS
LIBS =  -lstdc++ -L../ptlib-2.16.2 -lpt -lssl -lcrypto -lexpat -lsrtp -lspeexdsp 
ifeq ($(OS),Windows_NT)
	LIBS +=  -ljpeg -lregex -lwinmm -lwsock32 -lws2_32 -lsnmpapi -lmpr -lcomdlg32 -lgdi32 -lavicap32 -liphlpapi -lole32 -lquartz
endif
#########################################################

PROGRAM = libopal

OBJS = 

# The directories in which source files reside.  
# At least one path should be specified.  
# SRCDIRS   := .        # current directory  
SRCDIRS   :=  src/asn \
			src/codec \
			src/ep \
			src/h224 \
			src/h323 \
			src/h460 \
			src/iax2 \
			src/im \
			src/opal \
			src/rtp \
			src/sdp \
			src/sip \
			src/t120 \
			src/t38 \

ifeq ($(OS),Windows_NT)
	SRCDIRS += src/win32
endif

# The source file types (headers excluded).  
# At least one type should be specified.  
# The valid suffixes are among of .c, .C, .cc, .cpp, .CPP, .c++, .cp, or .cxx.  
# SRCEXTS   := .c      # C program  
# SRCEXTS   := .cpp    # C++ program  
# SRCEXTS   := .c .cpp # C/C++ program  
SRCEXTS   := .cxx .cpp

ifneq ($(SRCDIRS),)
ifneq ($(SRCEXTS),)
	SOURCES = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))  
	OBJS += $(foreach x,$(SRCEXTS), $(patsubst %$(x),%.o,$(filter %$(x),$(SOURCES))))  
endif
endif

DEBUGOBJS = $(patsubst %.o,%.d,$(OBJS))  

$(PROGRAM): $(OBJS)
	$(CPP) $(LINK_FLAGS) -shared -o $@.so  $(OBJS) $(LIBS) 
	ar cr $@.a $(OBJS)

clean:
	clear
	rm -rf $(OBJS) *.o $(PROGRAM).so $(PROGRAM).a

install:
	cp -f $(PROGRAM) /e/nonsys/tools/video/
#$(OBJS):%.o :%.c  先用$(OBJS)中的一项，比如foo.o: %.o : %.c  含义为:试着用%.o匹配foo.o。如果成功%就等于foo。如果不成功，  
# Make就会警告，然后。给foo.o添加依赖文件foo.c(用foo替换了%.c里的%)  
# 也可以不要下面的这个生成规则，因为下面的 include $(DEF)  就隐含了。此处为了明了，易懂。故留着  
#compile c source file
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
%.o: %.C
	$(CC) $(CFLAGS) -c $< -o $@

#compile c++ source file
%.o: %.cpp
	$(CPP) $(CPPFLAGS) -c $< -o $@
%.o: %.cp
	$(CPP) $(CPPFLAGS) -c $< -o $@
%.o: %.CPP
	$(CPP) $(CPPFLAGS) -c $< -o $@
%.o: %.cc
	$(CPP) $(CPPFLAGS) -c $< -o $@
%.o: %.cxx
	$(CPP) $(CPPFLAGS) -c $< -o $@
%.o: %.c++
	$(CPP) $(CPPFLAGS) -c $< -o $@
